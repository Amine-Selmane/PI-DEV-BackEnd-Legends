'use strict';

const pna = require('process-nextick-args');
const objectKeys = Object.keys || function (obj) {
  const keys = [];
  for (const key in obj) {
    keys.push(key);
  }
  return keys;
};

const util = require('util');
const inherits = util.inherits;

const Readable = require('./_stream_readable');
const Writable = require('./_stream_writable');

inherits(Duplex, Readable);

module.exports = Duplex;

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

function onend() {
  if (this.allowHalfOpen || this._writableState.ended) return;

  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

Object.defineProperty(Duplex.prototype, 'destroyed', {
  enumerable: false,
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
